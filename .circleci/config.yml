version: 2.1

jobs:
  build:
    docker:
      - image: circleci/node:14.17.0
    steps:
      - checkout

      # Certifique-se de que estamos no diretório correto
      - run:
          name: Navegar para o diretório do projeto
          command: cd .circleci/project

      # Etapa para instalar dependências do projeto
      - run:
          name: Instalar dependências do projeto
          command: |
            sudo apt-get install debian-archive-keyring
            sudo deb http://deb.debian.org/debian buster main
            sudo deb http://security.debian.org/debian-security buster/updates main
            sudo apt update
            sudo apt upgrade docker-ce
            sudo systemctl restart docker
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
            nvm install --lts
            sudo npm install -g standard --save-dev --force
            npm install --legacy-peer-deps
            npm install -g npm@latest
            npm update

            
            
      # Tratar os WARNs do npm
      - run:
          name: Tratar WARNs do npm
          command: |
            npm install --save lru-cache
            npm install --save @eslint/object-schema
            npm install --save @eslint/config-array
            npm install --save inflight@latest
            npm install --save glob@latest
            npm install  --save rimraf@latest

      # Etapa para executar os testes
      - run:
          name: Teste Fake
          command: echo "Teste Fake"  # Nome solicitado no exemplo

      # Etapa para escanear a aplicação com npm audit
      - run:
          name: AppSec - npm audit
          command: npm audit

      # Executar o StandardJS no diretório do seu projeto
      - run:
          name: AppSec - StandardJS
          command: |
            npm install standard --save-dev
            npx standard
            standard

      # Etapa para escanear a aplicação com JSLint
      - run:
          name: AppSec - JSLint
          command: |
            npm install -g jslint
            jslint .

      # Etapa para escanear a aplicação com ESLint
      - run:
          name: AppSec - ESLint
          command: |
            npm install @eslint/create-config
            npx eslint .

      # Etapa para verificar dependências com Retire.js
      - run:
          name: AppSec - Retire.js
          command: |
            npm install -g retire
            retire

      # Etapa para escanear o Dockerfile e a imagem Docker com Clair
      - run:
          name: AppSec - Clair
          command: |
            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock quay.io/coreos/clairctl:latest clairctl analyze -l Dockerfile

      # Etapa para escanear o Dockerfile e a imagem Docker com Trivy
      - run:
          name: AppSec - Trivy
          command: |
            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest --ignore-unfixed .

      # Etapa para fazer deploy da aplicação
      - run:
          name: Deploy para AWS ECS
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_DEFAULT_REGION

            # Atualizar o serviço ECS
            aws ecs update-service --cluster TesteDevSecOpsJunto --service testedevsecops --force-new-deployment

    environment:
      AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
      AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
