version: 2.1

# Importação dos orbs necessários para o pipeline
orbs:
  aws-cli: circleci/aws-cli@4.1.3       # Orb para interagir com a AWS CLI
  aws-ecs: circleci/aws-ecs@4.0.0       # Orb para interagir com o AWS ECS
  node: circleci/node@5.2.0             # Orb para executar tarefas relacionadas ao Node.js
  sonarcloud: sonarsource/sonarcloud@2.0.0 # Orb para integrar com o SonarCloud
  snyk: snyk/snyk@2.1.0                 # Orb para integrar com o Snyk
  anchore-engine: anchore/anchore-engine@1.9.0 # Orb para integrar com o Anchore Engine

# Definição dos jobs que serão executados no pipeline
jobs:
  # --- Setup ---
  checkout:                                   # Job responsável por fazer o checkout do código
    docker:                                   # Define a imagem Docker a ser utilizada
      - image: cimg/base:stable              # Imagem Docker básica do CircleCI
    steps:                                    # Define os passos a serem executados dentro do job
      - checkout                               # 2.1 - Checkout -> Checkout do Código: Faz o checkout do código do repositório

  # --- Test ---
  test:                                       # Job responsável por executar os testes da aplicação
    docker:
      - image: cimg/node:18.12.0-alpine               # Imagem Docker com Node.js 18.12.0-alpine
    steps:
      - checkout
      - node/install:                         # Instala as dependências do projeto Node.js
          install-yarn: true
          node-version: '18.12.0-alpine'
      - run:
          name: Run tests                      # 2.2 - Test -> Teste com output "Fake test" ou o teste da sua aplicação: Executa os testes
          command: |                          # Define o comando a ser executado
            cd app1                           # Acessa o diretório da aplicação
            npm install                      # Instala as dependências
            npm test                         # Executa os testes

  # --- AppSec ---
  scan-app-snyk:                             # Job responsável por executar a análise SAST com Snyk
    docker:
      - image: cimg/node:lts                  # Imagem Docker com Node.js LTS
    steps:
      - checkout
      - run: npm ci                           # Instala as dependências do projeto
      - snyk/scan:                            # Executa a análise SAST com Snyk
          project-path: app2                  # Define o caminho para o projeto a ser analisado (app2)

  scan-app-sonarqube:                       # Job responsável por executar a análise estática com SonarQube
    docker:
      - image: cimg/node:latest               # Imagem Docker com a versão mais recente do Node.js
    steps:
      - checkout
      - sonarcloud/scan:                       # Executa a análise com SonarCloud
          sonarcloud-parameters:
            - sonar.projectKey: $SONAR_ORGANIZATION_testedevsecops_TesteDevSecOpsJunto # Define a chave do projeto no SonarCloud (Environment Variable)

  scan-docker-anchore:                       # Job responsável por executar a análise de segurança da imagem Docker com Anchore Engine
    executor: anchore/anchore_engine         # Define o executor como Anchore Engine
    steps:
      - setup_remote_docker                   # Configura o Docker para ser utilizado no job
      - checkout
      - run:
          command: docker build -t "testdevsecopsjunto:latest" . # Constrói a imagem Docker
          name: build container
      - anchore/analyze_local_image:          # Analisa a imagem Docker localmente com Anchore Engine
          dockerfile-path: ./app1/Dockerfile # Define o caminho para o Dockerfile
          image-name: testdevsecopsjunto:latest # Define o nome da imagem a ser analisada
          policy_bundle_file_path: .circleci/.anchore/policy_bundle.json # Define o caminho para o arquivo de políticas do Anchore
          policy-failure: true               # Define que o job deve falhar se a política não for atendida
          timeout: '500'                     # Define o tempo limite para a análise
      - anchore/parse_reports                 # Analisa os relatórios gerados pelo Anchore Engine
      - store_artifacts:                      # Armazena os relatórios como artefatos
          path: anchore-reports               # Define o caminho para os relatórios

  scan-docker-trivy:                        # Job responsável por executar a análise de segurança da imagem Docker com Trivy
    docker:
      - image: cimg/base:stable              # Imagem Docker básica do CircleCI
    steps:
      - checkout
      - run:
          name: Executar Trivy
          command: |
            #!/bin/bash -eo pipefail
            docker pull aquasec/trivy:latest # Faz o pull da imagem do Trivy
            docker run --rm aquasec/trivy:latest image $DOCKERHUB_USER/testdevsecopsjunto:latest > scan-results/trivy-report.txt # Executa a análise com Trivy e salva o relatório em um arquivo
      - store_artifacts:                      # Armazena o relatório como artefato
          path: scan-results/trivy-report.txt # Define o caminho para o relatório

  # --- Git Security ---
  scan-git-trufflehog:                      # Job responsável por executar a análise de segurança do código-fonte com Trufflehog
    docker:
      - image: trufflesecurity/trufflehog:latest # Imagem Docker do Trufflehog
    steps:
      - checkout
      - run:
          name: Executar Trufflehog
          command: |
            trufflehog github --repo https://github.com/Mreaggle/TesteDevSecOpsJunto > scan-results/trufflehog-report.txt # Executa o Trufflehog e salva o relatório em um arquivo
      - store_artifacts:                      # Armazena o relatório como artefato
          path: scan-results/trufflehog-report.txt # Define o caminho para o relatório

  scan-git-gitleaks:                        # Job responsável por executar a análise de segurança do código-fonte com GitLeaks
    docker:
      - image: zricethezav/gitleaks:latest # Imagem Docker do GitLeaks
    steps:
      - checkout
      - run:
          name: Executar GitLeaks
          command: |
            gitleaks detect --source . > scan-results/gitleaks-report.txt # Executa o GitLeaks e salva o relatório em um arquivo
      - store_artifacts:                      # Armazena o relatório como artefato
          path: scan-results/gitleaks-report.txt # Define o caminho para o relatório

  # --- Build & Deploy ---
  build-and-push-image:                     # Job responsável por construir e enviar a imagem Docker para o registro
    docker:
      - image: cimg/base:stable              # Imagem Docker básica do CircleCI
    steps:
      - checkout
      - run:
          name: Build Docker image             # 1 - Criar um Dockerfile para rodar uma aplicação a sua escolha: Constrói a imagem Docker
          command: docker build -t $DOCKERHUB_USER/testdevsecopsjunto:latest . # Define o nome da imagem e a tag
      - run:
          name: Log in to Docker Hub          # Faz o login no Docker Hub
          command: echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USER" --password-stdin # Utiliza as variáveis de ambiente para autenticação
      - run:
          name: Push Docker image to Docker Hub # Envia a imagem Docker para o Docker Hub
          command: docker push $DOCKERHUB_USER/testdevsecopsjunto:latest # Utiliza as variáveis de ambiente para definir o nome da imagem

  deploy:                                     # Job responsável por realizar o deploy da aplicação
    docker:
      - image: cimg/python:3.10               # Imagem Docker com Python 3.10
    steps:
      - aws-cli/setup:
          profile-name: default                # Define o perfil da AWS a ser utilizado
      - aws-ecs/deploy-service-update:        # Atualiza o serviço no AWS ECS
          cluster: $MY_APP_PREFIX-cluster      # Define o nome do cluster ECS
          family: $MY_APP_PREFIX-service      # Define o nome do serviço ECS
          task-definition: ./task-definition.json 
          timeout: 300                        # Define o tempo limite para a atualização do serviço

# Define o workflow do pipeline, que é uma sequência de jobs
workflows:
  build-and-deploy:                          # Nome do workflow
    jobs:                                     # Define os jobs que serão executados no workflow
      - checkout:                             # Executa o job 'checkout'
          context: TesteDevSecOps             # Define o contexto do CircleCI a ser utilizado
      - test:                                # Executa o job 'test'
          context: TesteDevSecOps             # Define o contexto do CircleCI a ser utilizado
          requires:                             # Define que o job 'test' depende do job 'checkout'
            - checkout
      - scan-app-snyk:                        # Executa o job 'scan-app-snyk'
          context: TesteDevSecOps             # Define o contexto do CircleCI a ser utilizado
          requires:                             # Define que o job 'scan-app-snyk' depende do job 'checkout'
            - checkout
      - scan-app-sonarqube:                  # Executa o job 'scan-app-sonarqube'
          context: TesteDevSecOps             # Define o contexto do CircleCI a ser utilizado
          requires:                             # Define que o job 'scan-app-sonarqube' depende do job 'checkout'
            - checkout
      - scan-docker-anchore:                  # Executa o job 'scan-docker-anchore'
          context: TesteDevSecOps             # Define o contexto do CircleCI a ser utilizado
          requires:                             # Define que o job 'scan-docker-anchore' depende do job 'checkout'
            - checkout
      - scan-docker-trivy:                   # Executa o job 'scan-docker-trivy'
          context: TesteDevSecOps             # Define o contexto do CircleCI a ser utilizado
          requires:                             # Define que o job 'scan-docker-trivy' depende do job 'checkout'
            - checkout
      - scan-git-trufflehog:                 # Executa o job 'scan-git-trufflehog'
          context: TesteDevSecOps             # Define o contexto do CircleCI a ser utilizado
          requires:                             # Define que o job 'scan-git-trufflehog' depende do job 'checkout'
            - checkout
      - scan-git-gitleaks:                   # Executa o job 'scan-git-gitleaks'
          context: TesteDevSecOps             # Define o contexto do CircleCI a ser utilizado
          requires:                             # Define que o job 'scan-git-gitleaks' depende do job 'checkout'
            - checkout
      - build-and-push-image:                # Executa o job 'build-and-push-image'
          requires:                             # Define que o job 'build-and-push-image' depende dos jobs de teste e segurança
            - test
            - scan-app-snyk
            - scan-app-sonarqube
            - scan-docker-anchore
            - scan-docker-trivy
            - scan-git-trufflehog
            - scan-git-gitleaks
      - deploy:                                # Executa o job 'deploy'
          requires:                             # Define que o job 'deploy' depende do job 'build-and-push-image'
            - build-and-push-image