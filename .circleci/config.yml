version: 2.1

jobs:
  build:
    docker:
      - image: circleci/node:latest

    steps:
      - checkout

      # Certifique-se de que estamos no diretório correto
      - run:
          name: Navegar para o diretório do projeto
          command: cd .circleci/project

      # Etapa para criar package.json se não existir
      - run:
          name: Garantir que package.json exista
          command: |
            if [ ! -f package.json ]; then
              npm init -y
            fi

      # Etapa para criar o package-lock.json se não existir
      - run:
          name: Garantir que package-lock.json exista
          command: npm i --package-lock-only

      # Etapa para instalar dependências do projeto
      - run:
          name: Instalar dependências do projeto
          command: npm install

      # Etapa para executar os testes
      - run:
          name: Teste Fake
          command: echo "Teste Fake"  # Nome solicitado no exemplo

      # Etapa para escanear a aplicação com npm audit
      - run:
          name: AppSec - npm audit
          command: npm audit

      # Etapa para escanear o Dockerfile e a imagem Docker com Clair
      - run:
          name: AppSec - Clair
          command: |
            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock quay.io/coreos/clairctl:latest clairctl analyze -l Dockerfile

      # Etapa para escanear o Dockerfile e a imagem Docker com Trivy
      - run:
          name: AppSec - Trivy
          command: |
            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest --ignore-unfixed .

      # Etapa para substituir ESLint por StandardJS
      - run:
          name: AppSec - StandardJS
          command: |
            npm install --save-dev standard
            npx standard --fix

      # Etapa para tratar os WARNs do npm
      - run:
          name: Tratar WARNs do npm
          command: |
            npm install --save lru-cache
            npm install --save rimraf@latest
            npm install --save glob@latest
            npm install --save @eslint/object-schema
            npm install --save @eslint/config-array

      # Etapa para executar os testes em paralelo
      - run:
          name: Executar Testes em Paralelo
          command: |
            circleci tests split --split-by=timings | circleci tests run --config .circleci/config.yml --

      # Etapa para fazer deploy da aplicação
      - run:
          name: Deploy para AWS ECS
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_DEFAULT_REGION

            # Atualizar o serviço ECS
            aws ecs update-service --cluster TesteDevSecOpsJunto --service testedevsecops --force-new-deployment

    environment:
      AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
      AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION

workflows:
  version: 2
  build-and-test:
    jobs:
      - build
