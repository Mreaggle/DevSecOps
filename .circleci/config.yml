version: 2.1 # Versão do CircleCI

jobs:
  checkout:
    docker:
      - image: circleci/node:18.12.0 # Imagem Node.js 18.12.0 no CircleCI para consistência com o Dockerfile
    steps:
      - checkout # Faz o checkout do código-fonte do repositório

  test-app1:
    docker:
      - image: circleci/node:18.12.0
    steps:
      - checkout
      - run:
          name: Executar testes (app1)
          command: cd app1 && npm test # Executa os testes unitários da aplicação app1

  scan-app-app2: # Job para análise estática de segurança da aplicação app2
    docker:
      - image: circleci/node:18.12.0
    steps:
      - checkout
      - run:
          name: Instalar ESLint (app2)
          command: cd app2 && npm install eslint@^7 --save-dev # Instala ESLint como dependência de desenvolvimento
      - run:
          name: Executar ESLint (app2)
          command: cd app2 && ./node_modules/.bin/eslint src/** # Executa a análise de código com ESLint
      - run:
          name: Instalar SonarQube Scanner
          command: |
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.7.0.2747-linux.zip
            unzip sonar-scanner-cli-4.7.0.2747-linux.zip
            sudo mv sonar-scanner-4.7.0.2747-linux /opt/sonar-scanner
            sudo ln -s /opt/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner
      - run:
          name: Executar SonarQube Scanner (app2)
          command: |
            cd app2
            sonar-scanner -Dsonar.projectKey=app2 \ # Define o nome do projeto no SonarQube
              -Dsonar.organization=mreaggle \ # Define a organização no SonarQube
              -Dsonar.host.url=https://sonarcloud.io \ # URL do servidor SonarQube
              -Dsonar.login=$SONAR_TOKEN # Token de autenticação do SonarQube
      - run:
          name: Instalar Snyk
          command: npm install -g snyk # Instala Snyk globalmente
      - run:
          name: Executar Snyk (app2)
          command: cd app2 && snyk test --severity-threshold=high # Executa a análise de vulnerabilidades com Snyk

  scan-docker-app1: # Job para análise de segurança da imagem Docker da app1
    docker:
      - image: circleci/node:18.12.0
    steps:
      - checkout
      - setup_remote_docker # Configura um ambiente Docker remoto
      - run:
          name: Construir imagem Docker (app1)
          command: docker build -t app1 . # Constrói a imagem Docker com a tag 'app1'
      - run:
          name: Executar Trivy (app1)
          command: docker run --rm aquasec/trivy:latest image app1 # Executa Trivy para analisar a imagem 'app1'
      - run:
          name: Executar Clair (app1) # Utiliza Clair para uma segunda validação da imagem, complementando o Trivy
          command: |
            docker pull arminc/clair-scanner:latest
            docker run -d -p 5432:5432 -e POSTGRES_PASSWORD=password --name db postgres:latest
            docker run --rm -it --link db:postgres -v $PWD:/tmp/src arminc/clair-scanner:latest clair-db:postgres clair:http://clair:6060 /tmp/src app1

  deploy-app1: # Job para deploy da aplicação app1 no AWS ECS
    docker:
      - image: circleci/amazon-linux-2:2018.03 # Imagem compatível com AWS CLI
    steps:
      - checkout
      - run:
          name: Configurar AWS CLI
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID # Define a chave de acesso da AWS
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY # Define a chave secreta da AWS
            aws configure set default.region $AWS_DEFAULT_REGION # Define a região padrão da AWS
      - run:
          name: Deploy da aplicação app1
          command: aws ecs update-service --cluster TesteDevSecOpsJunto --service testedevsecops --force-new-deployment # Atualiza o serviço no ECS forçando um novo deploy

# Define o workflow para executar os jobs sequencialmente
workflows:
  build_and_deploy:
    jobs:
      - checkout
      - test-app1:
          requires:
            - checkout
      - scan-app-app2:
          requires:
            - checkout
      - scan-docker-app1:
          requires:
            - checkout
      - deploy-app1:
          requires:
            - test-app1
            - scan-app-app2
            - scan-docker-app1