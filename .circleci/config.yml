version: 2.1

jobs:
  checkout: # Job para realizar o checkout do código e construir a imagem Docker
    docker:
      - image: cimg/node:18.12.0 # Imagem Node.js 18.12.0 next-gen
    working_directory: ~/project # Define o diretório de trabalho
    steps:
      - run:
          name: Instalar Java (versão mais recente) com sdkman
          command: |
            curl -s "https://get.sdkman.io" | bash
            source "$HOME/.sdkman/bin/sdkman-init.sh"
            sdk install java # Instala a versão mais recente do Java
            sdk default java 21.0.3-tem  # Define a versão 21.0.3-tem como padrão
      - setup_remote_docker
      - checkout # Faz o checkout do código-fonte do repositório
      - run:
          name: Criar pasta de artefatos
          command: mkdir -p scan-results # Cria a pasta scan-results se ela não existir

  test-app1: # Job para executar os testes unitários da aplicação app1
    docker:
      - image: cimg/node:18.12.0
    working_directory: ~/project
    steps:
      - checkout # Faz o checkout do código-fonte do repositório
      - run:
          name: Criar diretório de resultados de testes
          command: mkdir -p test-results # Cria o diretório test-results
      - run:
          name: Executar testes # Executa os testes unitários da aplicação app1
          command: |
            #!/bin/bash -eo pipefail
            echo "Listando diretórios:"
            ls -la
            if [ -d "app1" ]; then
              cd app1 && npm test > ../test-results/test-report.txt # Redireciona a saída para o arquivo usando caminho relativo
            else
              echo "Erro: Diretório app1 não encontrado!"
              exit 1
            fi
      - store_artifacts:  # Salva o relatório de testes como artefato
          path: test-results # Diretório onde os relatórios de teste são salvos
      - store_test_results: # Armazena os resultados dos testes para visualização no CircleCI
          path: test-results # Diretório onde os relatórios de teste são salvos

  scan-app-app2: # Job para realizar análise estática de segurança da aplicação app2
    docker:
      - image: cimg/node:18.12.0
    working_directory: ~/project
    steps:
      - checkout # Faz o checkout do código-fonte do repositório
      - setup_remote_docker
      - run:
          name: Criar diretório de resultados do ESLint
          command: mkdir -p scan-results/app2 && touch app2/eslint-report.txt  # Cria o arquivo dentro de app2
      - run:
          name: Executar ESLint # Executa a análise de código com ESLint e salva a saída em um arquivo
          command: |
            #!/bin/bash -eo pipefail 
            echo "Listando diretórios:" 
            ls -la  
            if [ -d "app2" ]; then 
              cd app2 && ./node_modules/.bin/eslint src/** --fix > ./eslint-report.txt # Salva o relatório dentro de app2
            else
              echo "Erro: Diretório app2 não encontrado!" 
              exit 1 
            fi
      - run:
          name: Instalar SonarQube Scanner # Instala o SonarQube Scanner
          command: |
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-6.0.0.4432-linux.zip
            mv sonar-scanner-cli-6.0.0.4432-linux.zip sonarqube.zip
            unzip sonarqube.zip 
            sudo mv sonar-scanner-6.0.0.4432-linux /opt/sonar-scanner
            sudo ln -s /opt/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner
      - run:
          name: Executar SonarQube Scanner # Executa a análise com o SonarScanner e salva a saída em um arquivo
          command: |
            #!/bin/bash -eo pipefail
            echo "Listando diretórios:"
            ls -la
            if [ -d "app2" ]; then
              cd app2 && sonar-scanner -Dsonar.projectKey=mreaggle_app2 -Dsonar.organization=$SONAR_ORGANIZATION -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN > scan-results/app2/sonarqube-report.txt
            else
              echo "Erro: Diretório app2 não encontrado!"
              exit 1
            fi
      - run:
          name: Construir imagem Dependency-Check customizada
          command: docker build -t ${DOCKERHUB_USER}/dependency-check:custom -f Dockerfile.dependencycheck . 
      - run:
          name: Login no Docker Hub
          command: echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USER --password-stdin
      - run:
          name: Enviar imagem Dependency-Check customizada
          command: docker push ${DOCKERHUB_USER}/dependency-check:custom
      - run:
          name: Executar OWASP Dependency-Check (app2)
          command: |
            docker run -d --name dependency-check -v $(pwd)/scan-results/app2:/reports ${DOCKERHUB_USER}/dependency-check:custom --project app2 --scan . --format HTML --out /reports/dependency-check-report.html 
            docker wait dependency-check # Aguarda o container finalizar a execução
            docker cp dependency-check:/reports/dependency-check-report.html scan-results/app2/  # Copia o relatório do container para o diretório app2
      - run: # Adicionando ls para depuração
          name: Listar arquivos em app2
          command: ls -la scan-results/app2
      - store_artifacts:
          path: scan-results/app2 # Salva os artefatos do diretório scan-results/app2

  scan-docker-app1: # Job para realizar análise de segurança da imagem Docker da app1
    docker:
      - image: cimg/node:18.12.0
    working_directory: ~/project
    steps:
      - checkout # Faz o checkout do código-fonte do repositório
      - setup_remote_docker # Configura um ambiente Docker remoto
      - run:
          name: Criar diretório de resultados do Trivy
          command: mkdir -p scan-results # Cria o diretório scan-results
      - run:
          name: Construir imagem Docker # Constrói a imagem Docker 
          command: |
            #!/bin/bash -eo pipefail
            echo "Listando diretórios:"
            ls -la
            if [ -d "app1" ]; then
              cd app1 && docker build -t ${DOCKERHUB_USER}/testdevsecopsjunto:latest .
            else
              echo "Erro: Diretório app1 não encontrado!"
              exit 1
            fi
      - run:
          name: Executar Trivy
          command: |
            #!/bin/bash -eo pipefail
            docker pull aquasec/trivy:latest
            docker run --rm aquasec/trivy:latest image ${DOCKERHUB_USER}/testdevsecopsjunto:latest > scan-results/trivy-report.txt
            
      - store_artifacts:  # Salva o relatório do Trivy como artefato
          path: scan-results/trivy-report.txt # Caminho relativo ao diretório de trabalho

  deploy-app1: # Job para realizar o deploy da aplicação app1 no AWS ECS Fargate
    docker:
      - image: cimg/aws:2022.06.1 # Imagem com AWS CLI
    working_directory: ~/project 
    steps:
      - checkout # Faz o checkout do código-fonte do repositório
      - setup_remote_docker # Configura um ambiente Docker remoto
      - run:
          name: Configurar AWS CLI # Configura as credenciais da AWS
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_DEFAULT_REGION
      - run:  # Login no Docker Hub *antes* de iniciar o container
          name: Login no Docker Hub
          command: echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USER --password-stdin
      - run:
          name: Construir e enviar imagem Docker (app1) # Constrói e envia a imagem Docker
          command: |
            #!/bin/bash -eo pipefail
            echo "Listando diretórios:"
            ls -la 
            if [ -d "app1" ]; then 
              cd app1 && docker build -t ${DOCKERHUB_USER}/testdevsecopsjunto:latest . 
              docker push ${DOCKERHUB_USER}/testdevsecopsjunto:latest 
            else
              echo "Erro: Diretório app1 não encontrado!" 
              exit 1 
            fi
      - run:
          name: Imprimir task definition
          command: cat ecs_task_definition.json
      - run:
          name: Atualizar task definition com nova imagem
          command: |
            aws ecs register-task-definition --cli-input-json file://ecs_task_definition.json --family testedevsecops 
      - run:
          name: Deploy da aplicação app1
          command: aws ecs update-service --cluster TesteDevSecOpsJunto --service testedevsecops --force-new-deployment

# Define o workflow para executar os jobs sequencialmente
workflows:
  build_and_deploy:
    jobs:
      - checkout # Executa o job 'checkout' primeiro
      - test-app1: 
          requires:
            - checkout
      - scan-app-app2: 
          requires:
            - checkout
      - scan-docker-app1: 
          requires:
            - checkout
      - deploy-app1: 
          requires:
            - test-app1
            - scan-app-app2
            - scan-docker-app1
            