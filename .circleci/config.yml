version: 2.1

# Importação dos orbs necessários para o pipeline
orbs:
  aws-cli: circleci/aws-cli@4.1.3       # Orb para interagir com a AWS CLI - facilita a autenticação e execução de comandos da AWS
  node: circleci/node@5.2.0             # Orb para executar tarefas relacionadas ao Node.js - fornece ambiente Node.js e gerenciamento de pacotes
  sonarcloud: sonarsource/sonarcloud@2.0.0 # Orb para integrar com o SonarCloud - automatiza a análise de código estático
  snyk: snyk/snyk@2.1.0                 # Orb para integrar com o Snyk - automatiza a análise de vulnerabilidades de segurança
  anchore-engine: anchore/anchore-engine@1.9.0 # Orb para integrar com o Anchore Engine - automatiza a análise de segurança de imagens Docker
  github-cli: circleci/github-cli@2.3.0  # Orb para integrar com GitHub
  # Define comandos personalizados para reutilização de código
commands:
  build-and-push-image:
    description: Build and push Docker image to Docker Hub # Descrição do comando
    steps:
      - run:
          name: Build Docker image # Nome do passo
          command: docker build -t $DOCKERHUB_USER/app1:latest . # Comando para construir a imagem Docker - usa variável de ambiente para o nome da imagem
      - run:
          name: Log in to Docker Hub
          command: echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USER" --password-stdin # Faz login no Docker Hub usando variáveis de ambiente para credenciais
      - run:
          name: Push Docker image to Docker Hub
          command: docker push $DOCKERHUB_USER/app1:latest # Envia a imagem Docker para o Docker Hub - usa variável de ambiente para o nome da imagem

# Definição dos jobs que serão executados no pipeline
jobs:
  # --- Setup ---
  checkout:                                   # Job responsável por fazer o checkout do código
    docker:                                   # Define a imagem Docker a ser utilizada
      - image: cimg/base:stable              # Imagem Docker básica do CircleCI - leve e eficiente
    steps:                                    # Define os passos a serem executados dentro do job
      - checkout                               # 2.1 - Checkout -> Checkout do Código: Faz o checkout do código do repositório

  # --- Test ---
  test:                                       # Job responsável por executar os testes da aplicação
    docker:
      - image: cimg/node:18.12.0              # Imagem Docker com Node.js 18.12.0 - ambiente consistente para testes
    steps:
      - checkout
      - node/install:                         # Instala as dependências do projeto Node.js - garante que as dependências estejam presentes
          install-yarn: false
          node-version: '18.12.0'
      - run:
          name: Run tests                      # 2.2 - Test -> Teste com output "Fake test" ou o teste da sua aplicação: Executa os testes
          command: |                          # Define o comando a ser executado
            cd app1                           # Acessa o diretório da aplicação
            npm install                      # Instala as dependências
            npm test                         # Executa os testes
      - run:
          name: Atualizar Git
          command: sudo apt-get update && sudo apt-get install -y git #Atualiza Git      
  # --- Scans GIT ---
  scan-git-trufflehog:                      # Job responsável por executar a análise de segurança do código-fonte com Trufflehog - procura por segredos no histórico do Git
    docker:
      - image: trufflesecurity/trufflehog:latest # Imagem Docker do Trufflehog
    steps:
      - checkout
      - run:
          name: Criar diretório scan-results
          command: mkdir -p scan-results
      - run:
          name: Executar Trufflehog
          command: |
            trufflehog github --repo https://github.com/Mreaggle/TesteDevSecOpsJunto > scan-results/trufflehog-report.txt
      - store_artifacts:                      # Armazena o relatório como artefato - disponibiliza os resultados da análise para posterior revisão
          path: scan-results/trufflehog-report.txt # Define o caminho para o relatório

  scan-git-gitleaks:                        # Job responsável por executar a análise de segurança do código-fonte com GitLeaks - procura por vazamentos de credenciais no código-fonte
    docker:
      - image: zricethezav/gitleaks:latest # Imagem Docker do GitLeaks
    steps:
      - checkout
      - run:
          name: Criar diretório scan-results
          command: mkdir -p scan-results
      - run:
          name: Executar GitLeaks
          command: |
            gitleaks detect --source . -r scan-results/gitleaks-report.json || true
          when: always                      # Executa o passo mesmo se houver erros - permite continuar o pipeline
      - store_artifacts:                      # Armazena o relatório como artefato - disponibiliza os resultados da análise para posterior revisão
          path: scan-results/gitleaks-report.json # Define o caminho para o relatório

  # --- Scans APPSEC ---
  scan-app1-snyk:                          # Job responsável por executar a análise SAST com Snyk em app1
    docker:                                 
      - image: cimg/node:18.12.0                 # Imagem Docker com Node.js LTS - ambiente estável para a análise
    steps:
      - checkout
      - run:
          name: Acessar diretório app1
          command: cd app1                   # Navega até o diretório do projeto app1
    snyk/scan:                  # Executa a análise SAST com Snyk - identifica vulnerabilidades no código-fonte

  scan-app2-snyk:                          # Job responsável por executar a análise SAST com Snyk em app2
    docker:                                 
      - image: cimg/node:18.12.0                 # Imagem Docker com Node.js LTS - ambiente estável para a análise
    steps:
      - checkout
      - run:
          name: Acessar diretório app2
          command: cd app2                   # Navega até o diretório do projeto app1
    snyk/scan:                  # Executa a análise SAST com Snyk - identifica vulnerabilidades no código-fonte

  scan-app-sonarqube:                       # Job responsável por executar a análise estática com SonarQube
    docker:                                 
      - image: cimg/node:18.12.0             # Imagem Docker com a versão específica do Node.js
    steps:
      - checkout #Checa as dependências
      - run:
          name: Definir branch principal
          command: echo 'export SONAR_BRANCH=main' >> $BASH_ENV
      - run:                                 
          name: Habilitar Debug Logging SonarCloud
          command: echo 'export SONAR_VERBOSE=true' >> $BASH_ENV
      - sonarcloud/scan:                     # Executa a análise com SonarCloud             
          project_root: app1                    

  scan-docker-trivy:                        # Job responsável por executar a análise de segurança da imagem Docker com Trivy
    docker:
      - image: cimg/node:18.12.0          # Imagem com Trivy
    steps:
      - checkout
      - setup_remote_docker: {}
      - run:
          name: Criar diretório de artefatos
          command: mkdir -p scan-results  
      - run:
          name: Build da imagem
          command: |
            cd app1
            ls -la #Lista diretório atual
            docker build -t mreaggle/app1:latest .
           
      - run:
          name: Executar Trivy
          command: |
            docker run --rm aquasec/trivy:latest image mreaggle/app1:latest > scan-results/trivy-report.txt
      - store_artifacts:                      # Armazena o relatório como artefato
          path: scan-results/trivy-report.txt

  scan-docker-anchore:                       # Job responsável por executar a análise de segurança da imagem Docker com Anchore Engine
    executor: anchore-engine/anchore_engine         # Define o executor como Anchore Engine - ambiente especializado para análise de imagens
    steps:
      - setup_remote_docker                   # Configura o Docker para ser utilizado no job
      - checkout
      - run:
          name: Build da imagem Docker
          command: |
            cd app1                           # Acessa o diretório do Dockerfile
            docker build -t "testdevsecopsjunto:latest" . # Constrói a imagem Docker - cria a imagem para análise
      - anchore-engine/analyze_local_image:          # Analisa a imagem Docker localmente com Anchore Engine - identifica vulnerabilidades e verifica conformidade com políticas
          image_name: testdevsecopsjunto:latest # Define o nome da imagem a ser analisada
          timeout: '500'                     # Define o tempo limite para a análise - previne execuções longas
      - anchore-engine/parse_reports                 # Analisa os relatórios gerados pelo Anchore Engine - extrai informações relevantes
      - store_artifacts:                      # Armazena os relatórios como artefatos - disponibiliza os resultados da análise para posterior revisão
          path: anchore-reports               # Define o caminho para os relatórios

  


    # --- Build & Deploy ---
  build-and-push-image:
    docker:
      - image: cimg/base:stable                     
    steps:
      - checkout
      - run:
          name: Build Docker image
          command: |
            cd app1
            docker build -t $DOCKERHUB_USER/app1:latest .
            echo "export IMAGE_NAME=$DOCKERHUB_USER/app1:latest" >> $BASH_ENV # Exportar o nome da imagem
      - run:
          name: Log in to Docker Hub
          command: echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USER" --password-stdin
      - run:
          name: Push Docker image to Docker Hub
          command: docker push $DOCKERHUB_USER/app1:latest                

  deploy:                                    
    docker:
      - image: cimg/python:3.10            
    steps:
      - checkout
      - aws-cli/install:
          version: latest
      - run:
          name: Assumir Função IAM
          command: |
            aws-cli/assume_role_with_web_identity \
              role-arn: $ROLE_ARN \
              role-session-name: circleci-deploy \
      - run:
          name: Configurar AWS CLI
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set aws_session_token $AWS_SESSION_TOKEN
            aws configure set default.region $AWS_DEFAULT_REGION
  

  # --- Rodar BurpSuite ---
  BurpScan-http-headers:
    docker:
      - image: $DOCKERHUB_USER/app1:latest  # Use a imagem que você construiu
    steps:
      - checkout
      - aws-cli/install:
          version: latest
      - run:
          name: Assumir Função IAM
          command: |
            aws-cli/assume_role_with_web_identity \
              role-arn: $ROLE_ARN \
              role-session-name: circleci-burp \
              context: TesteDevSecOps
      - run:
          name: Configurar AWS CLI
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set aws_session_token $AWS_SESSION_TOKEN
            aws configure set default.region $AWS_DEFAULT_REGION
      - run:
          name: Obter IP da aplicação
          command: |
            IP_PUBLICO=$(aws ecs describe-services --cluster $MY_APP_PREFIX-cluster --services $MY_APP_PREFIX-service --query 'services[0].deployments[0].networkConfiguration.awsvpcConfiguration.subnets[0]' --output text)
            echo "export IP_PUBLICO=$IP_PUBLICO" >> $BASH_ENV
      - run:
          name: Instalar Burp Suite
          command: |
            wget https://portswigger.net/burp/communitydownload -O burpsuite_community.jar
            chmod +x burpsuite_community.jar
      - run:
          name: Executar Burp Suite
          command: |
            java -jar burpsuite_community.jar --headless \
              --project-file=burp-project.xml \
              --url=http://$IP_PUBLICO:3000 \
              --scan-definition=scan-definition.json \
              --report-file=scan-results/burp-report.html
      - store_artifacts:
          path: scan-results/burp-report.html

  BurpFix-http-headers: # Corrige os erros encontrados pelo BurpSuite
    docker:
      - image: cimg/python:3.10  # Imagem com Python para executar o script
    steps:
      - checkout
      - run:
          name: Instalar BeautifulSoup4
          command: pip install beautifulsoup4
      - run:
          name: Corrigir Headers
          command: python fix-http-headers.py

# Define o workflow do pipeline, que é uma sequência de jobs
workflows:
  build-and-deploy:                          # Nome do workflow - descreve o fluxo de trabalho do pipeline
    jobs:                                     # Define os jobs que serão executados no workflow
      # - checkout                             # Executa o job 'checkout' - obtém o código-fonte do repositório
      # - test:                                # Executa o job 'test' - executa os testes da aplicação
      #     context: TesteDevSecOps             
      #     requires:                             
      #       - checkout
      # - scan-git-trufflehog:                 
      #     context: TesteDevSecOps             
      #     requires:                             
      #       - checkout
      #       - test
      # - scan-git-gitleaks:                   
      #     context: TesteDevSecOps             
      #     requires:                             
      #       - checkout
      #       - test
      # - scan-app1-snyk:                        
      #     context: TesteDevSecOps             
      #     requires:                             
      #       - checkout
      #       - test
      #       - scan-git-trufflehog
      #       - scan-git-gitleaks
      # - scan-app2-snyk:                        
      #     context: TesteDevSecOps             
      #     requires:                             
      #       - checkout
      #       - test
      #       - scan-git-trufflehog
      #       - scan-git-gitleaks
      # - scan-app-sonarqube:                  
      #     context: TesteDevSecOps
      #     requires:                             
      #       - checkout
      #       - test
      #       - scan-git-trufflehog
      #       - scan-git-gitleaks
      # - scan-docker-anchore:                  
      #     context: TesteDevSecOps            
      #     requires:                             
      #       - checkout
      #       - test
      #       - scan-git-trufflehog
      #       - scan-git-gitleaks
      # - scan-docker-trivy:                   
      #     #context: TesteDevSecOps             
      #     requires:                             
      #       - checkout
      #       - test
      #       - scan-git-trufflehog
      #       - scan-git-gitleaks
      - build-and-push-image:                # Executa o job 'build-and-push-image' - constrói e envia a imagem Docker para o registro
          context: TesteDevSecOps
          requires:                             # Define que o job 'build-and-push-image' depende dos jobs de teste e segurança - garante que a aplicação seja testada e verificada antes do deploy
            - checkout
      - deploy:                                
          context: TesteDevSecOps
          requires:                             
            - build-and-push-image
      - BurpScan-http-headers:
          context: TesteDevSecOps
          requires:
            - deploy
      - BurpFix-http-headers:
          context: TesteDevSecOps
          requires:
            - BurpScan-http-headers
      - run:
          name: Imprimir URL/IP da aplicação
          command: |
            # Obter IP público ou URL da aplicação implantada no ECS
            echo "Aplicação disponível em: http://$IP_PUBLICO:3000"
          requires:
            - deploy
