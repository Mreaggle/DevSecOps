version: 2.1

executors:
  node-executor:
    docker:
      - image: cimg/node:18.12.0
    working_directory: ~/project

  python-executor:
    docker:
      - image: cimg/python:3.8.12
    working_directory: ~/project

  aws-cli-executor:
    docker:
      - image: cimg/aws-cli:2.2.47
    working_directory: ~/project

jobs:
  checkout:
    executor: node-executor
    steps:
      - run:
          name: Instalar Java (versão mais recente) com sdkman
          command: |
            curl -s "https://get.sdkman.io" | bash
            source "$HOME/.sdkman/bin/sdkman-init.sh"
            sdk install java
            sdk default java 21.0.3-tem
      - setup_remote_docker
      - checkout
      - run:
          name: Executar comando Docker
          command: |
            echo "Listando diretórios:"
            ls -la
            if [ -d "app1" ]; then
              cd app1 && docker build -t ${DOCKERHUB_USER}/testdevsecopsjunto:latest .
            else
              echo "Erro: Diretório app1 não encontrado!"
              exit 1

  test-app1:
    executor: node-executor
    steps:
      - checkout
      - run:
          name: Executar testes
          command: |
            echo "Listando diretórios:"
            ls -la
            if [ -d "app1" ]; then
              cd app1 && npm test > test-report.txt
            else
              echo "Erro: Diretório app1 não encontrado!"
              exit 1
      - store_artifacts:
          path: app1/test-report.txt
          destination: test-report

  scan-app-app2:
    executor: node-executor
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Instalar ESLint
          command: |
            echo "Listando diretórios:"
            ls -la
            if [ -d "app2" ]; then
              cd app2 && npm install eslint@^7 --save-dev
            else
              echo "Erro: Diretório app2 não encontrado!"
              exit 1
      - run:
          name: Executar ESLint
          command: |
            echo "Listando diretórios:"
            ls -la
            if [ -d "app2" ]; then
              cd app2 && ./node_modules/.bin/eslint src/** --fix
            else
              echo "Erro: Diretório app2 não encontrado!"
              exit 1
      - run:
          name: Instalar SonarQube Scanner
          command: |
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-6.0.0.4432-linux.zip
            unzip sonar-scanner-cli-6.0.0.4432-linux.zip
            sudo mv sonar-scanner-6.0.0.4432-linux /opt/sonar-scanner
            sudo ln -s /opt/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner
      - run:
          name: Executar SonarQube Scanner
          command: |
            echo "Listando diretórios:"
            ls -la
            if [ -d "app2" ]; then
              cd app2 && sonar-scanner -Dsonar.projectKey=mreaggle_app2 -Dsonar.organization=$SONAR_ORGANIZATION -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN
            else
              echo "Erro: Diretório app2 não encontrado!"
              exit 1
      - run:
          name: Construir imagem Dependency-Check customizada
          command: docker build -t ${DOCKERHUB_USER}/dependency-check:custom -f Dockerfile.dependencycheck .
      - run:
          name: Login no Docker Hub
          command: echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USER --password-stdin
      - run:
          name: Enviar imagem Dependency-Check customizada
          command: docker push ${DOCKERHUB_USER}/dependency-check:custom
      - run:
          name: Executar OWASP Dependency-Check (app2)
          command: |
            docker run -v /home/circleci/project:/src ${DOCKERHUB_USER}/dependency-check:custom --project app2 --scan . --format HTML --out ./dependency-check-report.html
      - store_artifacts:
          path: app2/dependency-check-report.html
          destination: dependency-check-report

  scan-docker-app1:
    executor: node-executor
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Construir imagem Docker
          command: |
            echo "Listando diretórios:"
            ls -la
            if [ -d "app1" ]; then
              cd app1 && docker build -t app1 .
            else
              echo "Erro: Diretório app1 não encontrado!"
              exit 1
      - run:
          name: Executar Trivy
          command: |
            docker pull aquasec/trivy:latest
            docker run --rm aquasec/trivy:latest image ${DOCKERHUB_USER}/app1:latest > trivy-report.txt
      - store_artifacts:
          path: trivy-report.txt
          destination: trivy-report

  deploy-app1:
    executor: aws-cli-executor
    steps:
      - checkout
      - run:
          name: Configurar AWS CLI
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_DEFAULT_REGION
      - run:
          name: Construir e enviar imagem Docker (app1)
          command: |
            echo "Listando diretórios:"
            ls -la
            if [ -d "app1" ]; then
              cd app1 && docker build -t ${DOCKERHUB_USER}/testdevsecopsjunto:latest .
              echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USER --password-stdin
              docker push ${DOCKERHUB_USER}/testdevsecopsjunto:latest
            else
              echo "Erro: Diretório app1 não encontrado!"
              exit 1
      - run:
          name: Atualizar task definition com nova imagem
          command: |
            aws ecs register-task-definition --cli-input-json file://ecs_task_definition.json --family testedevsecops
      - run:
          name: Deploy da aplicação app1
          command: |
            aws ecs update-service --cluster TesteDevSecOpsJunto --service testedevsecops --force-new-deployment --load-balancers targetGroupArn=arn:aws:elasticloadbalancing:us-east-1:058264068878:targetgroup/app1-tg/f139bc416c67ca75,containerName=app1,containerPort=3000

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - checkout
      - test-app1:
          requires:
            - checkout
      - scan-app-app2:
          requires:
            - checkout
      - scan-docker-app1:
          requires:
            - checkout
      - deploy-app1:
          requires:
            - test-app1
            - scan-app-app2
            - scan-docker-app1
