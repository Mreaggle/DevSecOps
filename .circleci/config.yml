version: 2.1

jobs:
  build:
    docker:
      - image: circleci/node:latest
    parallelism: 4  # Definir o número de executores paralelos desejados
    steps:
      # Divisão e execução dos testes em paralelo
      - run:
          name: Executar Testes em Paralelo
          command: |
            circleci tests split --split-by=timings > test_files.txt || true
            circleci tests run --no-parallel < test_files.txt
      # Instalar o plugin circleci-tests-plugin-cli sem as bandeiras não suportadas
      - run:
            name: Instalar circleci-tests-plugin-cli
            command: |
                npm install -g circleci-tests-plugin-cli

      # Verificar e regenerar o arquivo de dados de tempo histórico, se estiver ausente
      - run:
          name: Verificar e regenerar dados de tempo histórico
          command: |
              if [ ! -f historical_data.txt ]; then
                echo "Arquivo de dados de tempo histórico não encontrado. Regenerando..."
                # Substitua pelo comando real para gerar o arquivo historical_data.txt
                # Exemplo de comando: generate_historical_data_command > historical_data.txt
                # Se a geração não for simples, forneça uma fonte alternativa.
              fi

        
      - checkout

      # Certifique-se de que estamos no diretório correto
      - run:
          name: Navegar para o diretório do projeto
          command: cd .circleci/project

      # Etapa para criar package.json se não existir
      - run:
          name: Garantir que package.json exista
          command: |
            if [ ! -f package.json ]; then
              npm init -y
            fi

      # Etapa para criar o package-lock.json se não existir
      - run:
          name: Garantir que package-lock.json exista
          command: npm i --package-lock-only

      # Etapa para instalar dependências do projeto
      - run:
          name: Instalar dependências do projeto
          command: npm install

      # Tratar os WARNs do npm
      - run:
          name: Tratar WARNs do npm
          command: |
            npm install --save lru-cache
            npm install --save rimraf@latest
            npm install --save glob@latest
            npm install --save @eslint/object-schema
            npm install --save @eslint/config-array


      # Etapa para executar os testes
      - run:
          name: Teste Fake
          command: echo "Teste Fake"  # Nome solicitado no exemplo
          timeout: 3m


      # Etapa para escanear a aplicação com npm audit
      - run:
          name: AppSec - npm audit
          command: npm audit


      # Etapa para escanear a aplicação com ESLint
      - run:
          name: AppSec - ESLint
          command: |
            npm install eslint eslint-plugin-react --save-dev
            npx eslint --init --max-warnings=0 --force
            echo "module.exports = {
              env: {
                browser: true,
                es2021: true,
                node: true,
              },
              extends: [
                'eslint:recommended',
                'plugin:react/recommended',
              ],
              parserOptions: {
                ecmaFeatures: {
                  jsx: true,
                },
                ecmaVersion: 12,
                sourceType: 'module',
              },
              plugins: [
                'react',
              ],
              rules: {
                'react/react-in-jsx-scope': 'off',
              },
            };" > eslint.config.js
            npx eslint .
          timeout: 3m           


      # Etapa para escanear a aplicação com JSLint
      - run:
          name: AppSec - JSLint
          command: |
            npm install -g jslint
            jslint .
          timeout: 3m


      # Etapa para verificar dependências com Retire.js
      - run:
          name: AppSec - Retire.js
          command: |
            npm install -g retire
            retire
          timeout: 3m       


      # Etapa para escanear o Dockerfile e a imagem Docker com Clair
      - run:
          name: AppSec - Clair
          command: |
            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock quay.io/coreos/clairctl:latest clairctl analyze -l Dockerfile
          timeout: 3m


      # Etapa para escanear o Dockerfile e a imagem Docker com Trivy
      - run:
          name: AppSec - Trivy
          command: |
            docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest --ignore-unfixed .
          timeout: 3m


      # Etapa para fazer deploy da aplicação
      - run:
          name: Deploy para AWS ECS
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_DEFAULT_REGION

            # Atualizar o serviço ECS
            aws ecs update-service --cluster TesteDevSecOpsJunto --service testedevsecops --force-new-deployment
    environment:
      AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY
      AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build