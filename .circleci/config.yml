version: 2.1

# Importação dos orbs necessários para o pipeline
orbs:
  aws-cli: circleci/aws-cli@4.1.3       # Orb para interagir com a AWS CLI
  aws-ecs: circleci/aws-ecs@4.0.0       # Orb para interagir com o AWS ECS
  node: circleci/node@5.2.0             # Orb para executar tarefas relacionadas ao Node.js
  sonarcloud: sonarsource/sonarcloud@2.0.0 # Orb para integrar com o SonarCloud
  snyk: snyk/snyk@1.0.0                 # Orb para integrar com o Snyk (versão atualizada)
  anchore-engine: anchore/anchore-engine@1.9.0 # Orb para integrar com o Anchore Engine

commands:
  build-and-push-image:
    description: Build and push Docker image to Docker Hub
    steps:
      - run:
          name: Build Docker image
          command: docker build -t $DOCKERHUB_USER/testdevsecopsjunto:latest .
      - run:
          name: Log in to Docker Hub
          command: echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USER" --password-stdin
      - run:
          name: Push Docker image to Docker Hub
          command: docker push $DOCKERHUB_USER/testdevsecopsjunto:latest

# Definição dos jobs que serão executados no pipeline
jobs:
  # --- Setup ---
  checkout:                                   # Job responsável por fazer o checkout do código
    docker:                                   # Define a imagem Docker a ser utilizada
      - image: cimg/base:stable              # Imagem Docker básica do CircleCI
    steps:                                    # Define os passos a serem executados dentro do job
      - checkout                               # 2.1 - Checkout -> Checkout do Código: Faz o checkout do código do repositório

  # --- Test ---
  test:                                       # Job responsável por executar os testes da aplicação
    docker:
      - image: cimg/node:18.12.0-alpine               # Imagem Docker com Node.js 18.12.0-alpine
    steps:
      - checkout
      - node/install:                         # Instala as dependências do projeto Node.js
          install-yarn: true
          node-version: '18.12.0-alpine'
      - run:
          name: Run tests                      # 2.2 - Test -> Teste com output "Fake test" ou o teste da sua aplicação: Executa os testes
          command: |                          # Define o comando a ser executado
            cd app1                           # Acessa o diretório da aplicação
            npm install                      # Instala as dependências
            npm test                         # Executa os testes

  # --- AppSec ---
  scan-app2-snyk:                             # Job responsável por executar a análise SAST com Snyk em app2
    type: docker
    docker:                                 
      - image: cimg/node:lts
    steps:
      - checkout
      - run: npm ci
      - run:
          name: Acessar diretório app2
          command: cd app2
      - run:
          name: Executar Snyk Scan
          command: snyk/scan

  scan-app1-snyk:                          # Job responsável por executar a análise SAST com Snyk em app1
    type: docker
    docker:                                 
      - image: cimg/node:lts
    steps:
      - checkout
      - run: npm ci
      - run:
          name: Acessar diretório app1
          command: cd app1
      - run:
          name: Executar Snyk Scan
          command: snyk/scan

  scan-app-sonarqube:                       # Job responsável por executar a análise estática com SonarQube
    type: docker
    docker:                                 
      - image: cimg/node:latest
    steps:
      - checkout
      - sonarcloud/scan:
          sonar.projectKey: $SONAR_ORGANIZATION_testedevsecops_TesteDevSecOpsJunto

  scan-docker-anchore:                       # Job responsável por executar a análise de segurança da imagem Docker com Anchore Engine
  executor: anchore-engine/anchore_engine         # Define o executor como Anchore Engine
  steps:
    - setup_remote_docker                   # Configura o Docker para ser utilizado no job
    - checkout
    - run:
        command: docker build -t "testdevsecopsjunto:latest" . # Constrói a imagem Docker
        name: build container
    - anchore-engine/analyze_local_image:          # Analisa a imagem Docker localmente com Anchore Engine
        image_name: $DOCKERHUB_USER/testdevsecopsjunto:latest # Define o nome da imagem a ser analisada
        # Remova os parâmetros 'policy-failure' e 'dockerfile-path'
        timeout: '500'                     # Define o tempo limite para a análise
    - anchore-engine/parse_reports                 
    - store_artifacts:                      # Armazena os relatórios como artefatos
        path: anchore-reports               # Define o caminho para os relatórios

  scan-docker-trivy:
    type: docker
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Executar Trivy
          command: |
            #!/bin/bash -eo pipefail
            docker pull aquasec/trivy:latest
            docker run --rm aquasec/trivy:latest image $DOCKERHUB_USER/testdevsecopsjunto:latest > scan-results/trivy-report.txt
      - store_artifacts:
          path: scan-results/trivy-report.txt

  # --- Git Security ---
  scan-git-trufflehog:
    type: docker
    docker:
      - image: trufflesecurity/trufflehog:latest
    steps:
      - checkout
      - run:
          name: Executar Trufflehog
          command: |
            trufflehog github --repo https://github.com/Mreaggle/TesteDevSecOpsJunto > scan-results/trufflehog-report.txt
      - store_artifacts:
          path: scan-results/trufflehog-report.txt

  scan-git-gitleaks:
    type: docker
    docker:
      - image: zricethezav/gitleaks:latest
    steps:
      - checkout
      - run:
          name: Executar GitLeaks
          command: |
            gitleaks detect --source . > scan-results/gitleaks-report.txt
      - store_artifacts:
          path: scan-results/gitleaks-report.txt

  # --- Build & Deploy ---
  build-and-push-image:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - build-and-push-image

  deploy:
    docker:
      - image: cimg/python:3.10
    steps:
      - aws-cli/setup:
          profile-name: default
      - aws-ecs/deploy-service-update:
          auth:
            - aws-cli/setup:
                profile: OIDC-USER
                role_arn: $ROLE_ARN
          cluster: $MY_APP_PREFIX-cluster
          family: $MY_APP_PREFIX-service
          task-definition: ./task-definition.json
          container_image_name_updates: 'container=testdevsecopsjunto-container,tag=latest'
          verify_revision_is_deployed: true
          timeout: 300

# Define o workflow do pipeline, que é uma sequência de jobs
workflows:
  build-and-deploy:
    jobs:
      - checkout:
          context: TesteDevSecOps
      - test:
          context: TesteDevSecOps
          requires:
            - checkout
      - scan-app2-snyk:
          context: TesteDevSecOps
          requires:
            - checkout
      - scan-app1-snyk:
          context: TesteDevSecOps
          requires:
            - checkout
      - scan-app-sonarqube:
          context: TesteDevSecOps
          requires:
            - checkout
      - scan-docker-anchore:
          context: TesteDevSecOps
          requires:
            - checkout
      - scan-docker-trivy:
          context: TesteDevSecOps
          requires:
            - checkout
      - scan-git-trufflehog:
          context: TesteDevSecOps
          requires:
            - checkout
      - scan-git-gitleaks:
          context: TesteDevSecOps
          requires:
            - checkout
      - build-and-push-image:
          requires:
            - test
            - scan-app2-snyk
            - scan-app1-snyk
            - scan-app-sonarqube
            - scan-docker-anchore
            - scan-docker-trivy
            - scan-git-trufflehog
            - scan-git-gitleaks
      - deploy:
          requires:
            - build-and-push-image