version: 2.1

jobs:
  checkout: # Job para realizar o checkout do código e construir a imagem Docker
    docker:
      - image: cimg/node:18.12.0 # Imagem Node.js 18.12.0 next-gen
    working_directory: ~/project # Define o diretório de trabalho para /home/circleci/project
    steps:
      - run:
          name: Instalar Java (versão mais recente) com sdkman
          command: |
            curl -s "https://get.sdkman.io" | bash
            source "$HOME/.sdkman/bin/sdkman-init.sh"
            sdk install java # Instala a versão mais recente do Java
            sdk default java 21.0.3-tem  # Define a versão 21.0.3-tem como padrão
      - setup_remote_docker
      - checkout # Faz o checkout do código-fonte do repositório
      - run:
          name: Executar comando Docker # Constrói a imagem Docker com a tag especificada no Docker Hub
          command: |
            #!/bin/bash -eo pipefail # Define o shell e as opções de erro
            echo "Listando diretórios:" # Imprime mensagem informativa
            ls -la  # Lista os arquivos e diretórios no projeto
            if [ -d "app1" ]; then # Verifica se o diretório app1 existe
              cd app1 && docker build -t ${DOCKERHUB_USER}/testdevsecopsjunto:latest . # Navega até app1 e constrói a imagem
            else
              echo "Erro: Diretório app1 não encontrado!" # Imprime mensagem de erro se o diretório não for encontrado
              exit 1 # Sai do script com erro
            fi

  test-app1: # Job para executar os testes unitários da aplicação app1
    docker:
      - image: cimg/node:18.12.0
    working_directory: ~/project # Define o diretório de trabalho para /home/circleci/project
    steps:
      - checkout # Faz o checkout do código-fonte do repositório
      - run:
          name: Executar testes (app1) # Executa os testes unitários da aplicação app1
          command: |
            #!/bin/bash -eo pipefail # Define o shell e as opções de erro
            echo "Listando diretórios:" # Imprime mensagem informativa
            ls -la  # Lista os arquivos e diretórios no projeto
            if [ -d "app1" ]; then # Verifica se o diretório app1 existe
              cd app1 && npm test # Navega até app1 e executa os testes
            else
              echo "Erro: Diretório app1 não encontrado!" # Imprime mensagem de erro se o diretório não for encontrado
              exit 1 # Sai do script com erro
            fi

  scan-app-app2: # Job para realizar análise estática de segurança da aplicação app2
    docker:
      - image: cimg/node:18.12.0
    working_directory: ~/project # Define o diretório de trabalho para /home/circleci/project
    steps:
      - checkout # Faz o checkout do código-fonte do repositório
      - run:
          name: Instalar ESLint (app2) # Instala ESLint como dependência de desenvolvimento
          command: |
            #!/bin/bash -eo pipefail # Define o shell e as opções de erro
            echo "Listando diretórios:" # Imprime mensagem informativa
            ls -la  # Lista os arquivos e diretórios no projeto
            if [ -d "app2" ]; then # Verifica se o diretório app2 existe
              cd app2 && npm install eslint@^7 --save-dev # Navega até app2 e instala o ESLint
            else
              echo "Erro: Diretório app2 não encontrado!" # Imprime mensagem de erro se o diretório não for encontrado
              exit 1 # Sai do script com erro
            fi
      - run:
          name: Executar ESLint (app2) # Executa a análise de código com ESLint
          command: |
            #!/bin/bash -eo pipefail # Define o shell e as opções de erro
            echo "Listando diretórios:" # Imprime mensagem informativa
            ls -la  # Lista os arquivos e diretórios no projeto
            if [ -d "app2" ]; then # Verifica se o diretório app2 existe
              cd app2 && ./node_modules/.bin/eslint src/** --fix # Navega até app2 e executa o ESLint --fix corrige erros
            else
              echo "Erro: Diretório app2 não encontrado!" # Imprime mensagem de erro se o diretório não for encontrado
              exit 1 # Sai do script com erro
            fi
      - run:
          name: Instalar SonarQube Scanner
          command: |
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-6.0.0.4432-linux.zip
            unzip sonar-scanner-cli-6.0.0.4432-linux.zip
            sudo mv sonar-scanner-cli-6.0.0.4432-linux /opt/sonar-scanner
            sudo ln -s /opt/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner
      - run:
          name: Executar SonarQube Scanner (app2) # Executa a análise SAST com o SonarQube Scanner
          command: |
            #!/bin/bash -eo pipefail # Define o shell e as opções de erro
            echo "Listando diretórios:" # Imprime mensagem informativa
            ls -la  # Lista os arquivos e diretórios no projeto
            if [ -d "app2" ]; then # Verifica se o diretório app2 existe
              cd app2 && sonar-scanner -Dsonar.projectKey=app2 -Dsonar.organization=$SONAR_ORGANIZATION -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=$SONAR_TOKEN # Navega até app2 e executa o SonarQube Scanner
            else
              echo "Erro: Diretório app2 não encontrado!" # Imprime mensagem de erro se o diretório não for encontrado
              exit 1 # Sai do script com erro
            fi
      - run:
          name: Instalar Snyk # Instala Snyk para análise de vulnerabilidades
          command: npm install -g snyk
      - run:
          name: Executar Snyk (app2) # Executa a análise de vulnerabilidades com Snyk
          command: |
            #!/bin/bash -eo pipefail # Define o shell e as opções de erro
            echo "Listando diretórios:" # Imprime mensagem informativa
            ls -la  # Lista os arquivos e diretórios no projeto
            if [ -d "app2" ]; then # Verifica se o diretório app2 existe
              cd app2 && snyk test --severity-threshold=high # Navega até app2 e executa o Snyk
            else
              echo "Erro: Diretório app2 não encontrado!" # Imprime mensagem de erro se o diretório não for encontrado
              exit 1 # Sai do script com erro
            fi

  scan-docker-app1: # Job para realizar análise de segurança da imagem Docker da app1
    docker:
      - image: cimg/node:18.12.0
    working_directory: ~/project # Define o diretório de trabalho para /home/circleci/project
    steps:
      - checkout # Faz o checkout do código-fonte do repositório
      - setup_remote_docker # Configura um ambiente Docker remoto
      - run:
          name: Construir imagem Docker (app1) # Constrói a imagem Docker com a tag 'app1'
          command: |
            #!/bin/bash -eo pipefail # Define o shell e as opções de erro
            echo "Listando diretórios:" # Imprime mensagem informativa
            ls -la  # Lista os arquivos e diretórios no projeto
            if [ -d "app1" ]; then # Verifica se o diretório app1 existe
              cd app1 && docker build -t app1 . # Navega até app1 e constrói a imagem
            else
              echo "Erro: Diretório app1 não encontrado!" # Imprime mensagem de erro se o diretório não for encontrado
              exit 1 # Sai do script com erro
            fi
      - run:
          name: Executar Trivy (app1) # Executa Trivy para analisar a imagem 'app1' em busca de vulnerabilidades
          command: docker run --rm aquasec/trivy:latest image app1
      - run:
          name: Executar Clair (app1) # Utiliza Clair para uma segunda validação da imagem, complementando o Trivy
          command: |
            docker pull arminc/clair-scanner:latest
            docker run -d -p 5432:5432 -e POSTGRES_PASSWORD=password --name db postgres:latest
            docker run --rm -it --link db:postgres -v $PWD:/tmp/src arminc/clair-scanner:latest clair-db:postgres clair:http://clair:6060 /tmp/src app1

  deploy-app1: # Job para realizar o deploy da aplicação app1 no AWS ECS Fargate
    docker:
      - image: cimg/amazonlinux2:2018.03 # Imagem compatível com AWS CLI, next-gen
    working_directory: ~/project # Define o diretório de trabalho para /home/circleci/project
    steps:
      - checkout # Faz o checkout do código-fonte do repositório
      - run:
          name: Configurar AWS CLI # Configura as credenciais da AWS para uso no pipeline
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set default.region $AWS_DEFAULT_REGION
      - run:
          name: Construir e enviar imagem Docker (app1) # Constrói e envia a imagem Docker para o Docker Hub
          command: |
            #!/bin/bash -eo pipefail # Define o shell e as opções de erro
            echo "Listando diretórios:" # Imprime mensagem informativa
            ls -la  # Lista os arquivos e diretórios no projeto
            if [ -d "app1" ]; then # Verifica se o diretório app1 existe
              cd app1 && docker build -t ${DOCKERHUB_USER}/testdevsecopsjunto:latest . # Navega até app1 e constrói a imagem
              echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USER --password-stdin # Faz login no Docker Hub
              docker push ${DOCKERHUB_USER}/testdevsecopsjunto:latest # Envia a imagem para o Docker Hub
            else
              echo "Erro: Diretório app1 não encontrado!" # Imprime mensagem de erro se o diretório não for encontrado
              exit 1 # Sai do script com erro
            fi
      - run:
          name: Atualizar task definition com nova imagem # Atualiza a task definition no ECS com a nova imagem Docker
          command: |
            aws ecs register-task-definition --cli-input-json file://ecs_task_definition.json --family testedevsecops
      - run:
          name: Deploy da aplicação app1 # Realiza o deploy da aplicação no ECS Fargate, forçando um novo deploy
          command: aws ecs update-service --cluster TesteDevSecOpsJunto --service testedevsecops --force-new-deployment

# Define o workflow para executar os jobs sequencialmente
workflows:
  build_and_deploy:
    jobs:
      - checkout # Executa o job 'checkout' primeiro
      - test-app1: # Executa o job 'test-app1' após o 'checkout'
          requires:
            - checkout
      - scan-app-app2: # Executa o job 'scan-app-app2' após o 'checkout'
          requires:
            - checkout
      - scan-docker-app1: # Executa o job 'scan-docker-app1' após o 'checkout'
          requires:
            - checkout
      - deploy-app1: # Executa o job 'deploy-app1' após os jobs de teste e análise de segurança
          requires:
            - test-app1
            - scan-app-app2
            - scan-docker-app1