version: 2.1

# Importação dos orbs necessários para o pipeline
orbs:
  aws-cli: circleci/aws-cli@4.1.3       # Orb para interagir com a AWS CLI - facilita a autenticação e execução de comandos da AWS
  node: circleci/node@5.2.0             # Orb para executar tarefas relacionadas ao Node.js - fornece ambiente Node.js e gerenciamento de pacotes
  sonarcloud: sonarsource/sonarcloud@2.0.0 # Orb para integrar com o SonarCloud - automatiza a análise de código estático
  snyk: snyk/snyk@2.1.0                 # Orb para integrar com o Snyk - automatiza a análise de vulnerabilidades de segurança
  anchore-engine: anchore/anchore-engine@1.9.0 # Orb para integrar com o Anchore Engine - automatiza a análise de segurança de imagens Docker

# Define comandos personalizados para reutilização de código
commands:
  build-and-push-image:
    description: Build and push Docker image to Docker Hub # Descrição do comando
    steps:
      - run:
          name: Build Docker image # Nome do passo
          command: docker build -t $DOCKERHUB_USER/testdevsecopsjunto:latest . # Comando para construir a imagem Docker - usa variável de ambiente para o nome da imagem
      - run:
          name: Log in to Docker Hub
          command: echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USER" --password-stdin # Faz login no Docker Hub usando variáveis de ambiente para credenciais
      - run:
          name: Push Docker image to Docker Hub
          command: docker push $DOCKERHUB_USER/testdevsecopsjunto:latest # Envia a imagem Docker para o Docker Hub - usa variável de ambiente para o nome da imagem

# Definição dos jobs que serão executados no pipeline
jobs:
  # --- Setup ---
  checkout:                                   # Job responsável por fazer o checkout do código
    docker:                                   # Define a imagem Docker a ser utilizada
      - image: cimg/base:stable              # Imagem Docker básica do CircleCI - leve e eficiente
    steps:                                    # Define os passos a serem executados dentro do job
      - checkout                               # 2.1 - Checkout -> Checkout do Código: Faz o checkout do código do repositório

  # --- Test ---
  test:                                       # Job responsável por executar os testes da aplicação
    docker:
      - image: cimg/node:18.12.0              # Imagem Docker com Node.js 18.12.0 - ambiente consistente para testes
    steps:
      - checkout
      - node/install:                         # Instala as dependências do projeto Node.js - garante que as dependências estejam presentes
          install-yarn: true
          node-version: '18.12.0'
      - run:
          name: Run tests                      # 2.2 - Test -> Teste com output "Fake test" ou o teste da sua aplicação: Executa os testes
          command: |                          # Define o comando a ser executado
            cd app1                           # Acessa o diretório da aplicação
            npm install                      # Instala as dependências
            npm test                         # Executa os testes

  # --- Scans GIT ---
  scan-git-trufflehog:                      # Job responsável por executar a análise de segurança do código-fonte com Trufflehog - procura por segredos no histórico do Git
    docker:
      - image: trufflesecurity/trufflehog:latest # Imagem Docker do Trufflehog
    steps:
      - checkout
      - run:
          name: Criar diretório scan-results
          command: mkdir -p scan-results
      - run:
          name: Executar Trufflehog
          command: |
            trufflehog github --repo https://github.com/Mreaggle/TesteDevSecOpsJunto > scan-results/trufflehog-report.txt
      - store_artifacts:                      # Armazena o relatório como artefato - disponibiliza os resultados da análise para posterior revisão
          path: scan-results/trufflehog-report.txt # Define o caminho para o relatório

  scan-git-gitleaks:                        # Job responsável por executar a análise de segurança do código-fonte com GitLeaks - procura por vazamentos de credenciais no código-fonte
    docker:
      - image: zricethezav/gitleaks:latest # Imagem Docker do GitLeaks
    steps:
      - checkout
      - run:
          name: Criar diretório scan-results
          command: mkdir -p scan-results
      - run:
          name: Executar GitLeaks
          command: |
            gitleaks detect --source . -r scan-results/gitleaks-report.json || true
          when: always                      # Executa o passo mesmo se houver erros - permite continuar o pipeline
      - store_artifacts:                      # Armazena o relatório como artefato - disponibiliza os resultados da análise para posterior revisão
          path: scan-results/gitleaks-report.json # Define o caminho para o relatório

  # --- Scans APPSEC ---
  scan-app1-snyk:                          # Job responsável por executar a análise SAST com Snyk em app1
    docker:                                 
      - image: cimg/node:lts                  # Imagem Docker com Node.js LTS - ambiente estável para a análise
    steps:
      - checkout
      - run:
          name: Acessar diretório app1
          command: cd app1                   # Navega até o diretório do projeto app1
      - run:
          name: Executar Snyk Scan
          command: snyk/scan                  # Executa a análise SAST com Snyk - identifica vulnerabilidades no código-fonte

  scan-app2-snyk:                             # Job responsável por executar a análise SAST com Snyk em app2
    docker:                                 
      - image: cimg/node:lts                  # Imagem Docker com Node.js LTS - ambiente estável para a análise
    steps:
      - checkout
      - run: npm ci                           # Instala as dependências do projeto
      - run:
          name: Acessar diretório app2
          command: cd app2                   # Navega até o diretório do projeto app2
      - snyk/scan:                            # Executa a análise SAST com Snyk - identifica vulnerabilidades no código-fonte
          severity-threshold: high            # Define o limite de severidade para reportar vulnerabilidades
          monitor-on-build: true             # Habilita o monitoramento contínuo do projeto no Snyk

  scan-app-sonarqube:                       # Job responsável por executar a análise estática com SonarQube
    docker:                                 
      - image: cimg/node:latest               # Imagem Docker com a versão mais recente do Node.js
    steps:
      - checkout
      - run:
          name: Acessar diretório app1
          command: cd app1                   # Navega até o diretório do projeto app1
      - sonarcloud/scan:                       # Executa a análise com SonarCloud - verifica a qualidade do código e identifica problemas de segurança
          sonar_token_variable_name: SONAR_TOKEN # Define o nome da variável de ambiente que contém o token do SonarCloud

  scan-docker-anchore:                       # Job responsável por executar a análise de segurança da imagem Docker com Anchore Engine
    executor: anchore-engine/anchore_engine         # Define o executor como Anchore Engine - ambiente especializado para análise de imagens
    steps:
      - setup_remote_docker                   # Configura o Docker para ser utilizado no job
      - checkout
      - run:
          name: Build da imagem Docker
          command: docker build -t "testdevsecopsjunto:latest" . # Constrói a imagem Docker - cria a imagem para análise
      - anchore-engine/analyze_local_image:          # Analisa a imagem Docker localmente com Anchore Engine - identifica vulnerabilidades e verifica conformidade com políticas
          image_name: $DOCKERHUB_USER/testdevsecopsjunto:latest # Define o nome da imagem a ser analisada
          timeout: '500'                     # Define o tempo limite para a análise - previne execuções longas
      - anchore-engine/parse_reports                 # Analisa os relatórios gerados pelo Anchore Engine - extrai informações relevantes
      - store_artifacts:                      # Armazena os relatórios como artefatos - disponibiliza os resultados da análise para posterior revisão
          path: anchore-reports               # Define o caminho para os relatórios

  scan-docker-trivy:                        # Job responsável por executar a análise de segurança da imagem Docker com Trivy
    docker:
      - image: cimg/base:stable              # Imagem Docker básica do CircleCI - leve e eficiente
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Criar diretório scan-results
          command: mkdir -p scan-results
      - run:
          name: Executar Trivy
          command: |
            #!/bin/bash -eo pipefail
            docker pull aquasec/trivy:latest # Faz o pull da imagem do Trivy - garante que a versão mais recente seja utilizada
            docker run --rm aquasec/trivy:latest image $DOCKERHUB_USER/testdevsecopsjunto:latest > scan-results/trivy-report.txt # Executa a análise com Trivy e salva o relatório em um arquivo - usa variável de ambiente para o nome da imagem
      - store_artifacts:                      # Armazena o relatório como artefato - disponibiliza os resultados da análise para posterior revisão
          path: scan-results/trivy-report.txt # Define o caminho para o relatório

  # --- Build & Deploy ---
  build-and-push-image:                     # Job responsável por construir e enviar a imagem Docker para o registro
    docker:
      - image: cimg/base:stable              # Imagem Docker básica do CircleCI - leve e eficiente
    steps:
      - checkout
      - build-and-push-image                # Chama o comando personalizado - constrói e envia a imagem Docker

  deploy:                                     # Job responsável por realizar o deploy da aplicação
    docker:
      - image: cimg/aws:2.8.11               # Imagem Docker com AWS CLI pré-instalada
    steps:
      - checkout
      - run:
          name: Configurar AWS CLI
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set region $AWS_DEFAULT_REGION
      - run:
          name: Realizar Deploy no ECS
          command: |
            aws ecs update-service \
              --cluster $MY_APP_PREFIX-cluster \
              --service $MY_APP_PREFIX-service \
              --task-definition $MY_APP_PREFIX-task-definition \
              --force-new-deployment

# Define o workflow do pipeline, que é uma sequência de jobs
workflows:
  build-and-deploy:                          # Nome do workflow - descreve o fluxo de trabalho do pipeline
    jobs:                                     # Define os jobs que serão executados no workflow
      - checkout:                             # Executa o job 'checkout' - obtém o código-fonte do repositório
          context: TesteDevSecOps             # Define o contexto do CircleCI a ser utilizado - permite o uso de variáveis de ambiente e configurações específicas
      - test:                                # Executa o job 'test' - executa os testes da aplicação
          context: TesteDevSecOps             # Define o contexto do CircleCI a ser utilizado
          requires:                             # Define que o job 'test' depende do job 'checkout' - garante que o código-fonte esteja disponível para os testes
            - checkout
      - scan-git-trufflehog:                 # Executa o job 'scan-git-trufflehog' - realiza a análise de segurança do histórico do Git com Trufflehog
          context: TesteDevSecOps             # Define o contexto do CircleCI a ser utilizado
          requires:                             # Define que o job 'scan-git-trufflehog' depende do job 'checkout' e 'test'- garante que o histórico do Git esteja disponível para a análise
            - checkout
            - test
      - scan-git-gitleaks:                   # Executa o job 'scan-git-gitleaks' - realiza a análise de segurança do código-fonte com GitLeaks
          context: TesteDevSecOps             # Define o contexto do CircleCI a ser utilizado
          requires:                             # Define que o job 'scan-git-gitleaks' depende do job 'checkout' e 'test' - garante que o código-fonte esteja disponível para a análise
            - checkout
            - test
      - scan-app1-snyk:                        # Executa o job 'scan-app1-snyk' - realiza a análise de segurança do código-fonte do app1
          context: TesteDevSecOps             # Define o contexto do CircleCI a ser utilizado
          requires:                             # Define que o job 'scan-app1-snyk' depende do job 'checkout', 'test', 'scan-git-trufflehog' e 'scan-git-gitleaks' - garante que o código-fonte esteja disponível para a análise
            - checkout
            - test
            - scan-git-trufflehog
            - scan-git-gitleaks
      - scan-app2-snyk:                        # Executa o job 'scan-app2-snyk' - realiza a análise de segurança do código-fonte do app2
          context: TesteDevSecOps             # Define o contexto do CircleCI a ser utilizado
          requires:                             # Define que o job 'scan-app2-snyk' depende do job 'checkout', 'test', 'scan-git-trufflehog' e 'scan-git-gitleaks' - garante que o código-fonte esteja disponível para a análise
            - checkout
            - test
            - scan-git-trufflehog
            - scan-git-gitleaks
      - scan-app-sonarqube:                  # Executa o job 'scan-app-sonarqube' - realiza a análise estática de código com SonarQube
          context: TesteDevSecOps             # Define o contexto do CircleCI a ser utilizado
          requires:                             # Define que o job 'scan-app-sonarqube' depende do job 'checkout', 'test', 'scan-git-trufflehog' e 'scan-git-gitleaks' - garante que o código-fonte esteja disponível para a análise
            - checkout
            - test
            - scan-git-trufflehog
            - scan-git-gitleaks
      - scan-docker-anchore:                  # Executa o job 'scan-docker-anchore' - realiza a análise de segurança da imagem Docker com Anchore Engine
          context: TesteDevSecOps             # Define o contexto do CircleCI a ser utilizado
          requires:                             # Define que o job 'scan-docker-anchore' depende do job 'checkout', 'test', 'scan-git-trufflehog' e 'scan-git-gitleaks' - garante que a imagem Docker esteja disponível para a análise
            - checkout
            - test
            - scan-git-trufflehog
            - scan-git-gitleaks
      - scan-docker-trivy:                   # Executa o job 'scan-docker-trivy' - realiza a análise de segurança da imagem Docker com Trivy
          context: TesteDevSecOps             # Define o contexto do CircleCI a ser utilizado
          requires:                             # Define que o job 'scan-docker-trivy' depende do job 'checkout', 'test', 'scan-git-trufflehog' e 'scan-git-gitleaks' - garante que a imagem Docker esteja disponível para a análise
            - checkout
            - test
            - scan-git-trufflehog
            - scan-git-gitleaks
      - build-and-push-image:                # Executa o job 'build-and-push-image' - constrói e envia a imagem Docker para o registro
          requires:                             # Define que o job 'build-and-push-image' depende dos jobs de teste e segurança - garante que a aplicação seja testada e verificada antes do deploy
            - test
            - scan-git-trufflehog
            - scan-git-gitleaks
            - scan-app1-snyk
            - scan-app2-snyk
            - scan-app-sonarqube
            - scan-docker-anchore
            - scan-docker-trivy
      - deploy:                                # Executa o job 'deploy' - realiza o deploy da aplicação no AWS ECS
          context: TesteDevSecOps
          requires:                             # Define que o job 'deploy' depende do job 'build-and-push-image' - garante que a imagem Docker esteja disponível para o deploy
            - build-and-push-image